datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id             String    @id @default(uuid())
  username       String?   @unique
  email          String    @unique
  fullName       String?   @map("full_name")
  hashedPassword String?   // For custom auth
  avatarUrl      String?   @map("avatar_url")
  region         String?   // Required by frontend code
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at") // RE-ADDED THIS LINE

  // Relations
  posts              Post[]
  comments           Comment[]
  likes              Like[]
  sentMessages       Message[]              @relation("sent_messages")
  conversations      ConversationMember[]
  productionDetails  ProductionDetails?
  productionRecords  ProductionRecord[]
  commentLikes       CommentLike[]
  followedForums     ForumMember[]
  createdForums      Forum[]                @relation("CreatedForums")
}

model Post {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  authorId String  @map("author_id")
  author   Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  forumId String? @map("forum_id") // New field
  forum   Forum?  @relation(fields: [forumId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  authorId String  @map("author_id")
  author   Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String? @map("parent_id")
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")
  likes    CommentLike[]
}

model CommentLike {
  createdAt DateTime @default(now()) @map("created_at")

  authorId String  @map("author_id")
  author   Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  commentId String  @map("comment_id")
  comment  Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([authorId, commentId])
}

model Like {
  createdAt DateTime @default(now()) @map("created_at")

  authorId String  @map("author_id")
  author   Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([authorId, postId])
}

model ProductionDetails {
  id          String   @id @default(uuid())
  userId      String   @unique @map("user_id")
  cropName    String?  @map("crop_name")
  soilType    String?  @map("soil_type")
  surfaceArea Float?   @map("surface_area")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductionRecord {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  cropName       String   @map("crop_name")
  year           Int
  month          Int
  quantityTonnes Float    @map("quantity_tonnes")
  createdAt      DateTime @default(now()) @map("created_at")

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cropName, year, month])
}

model Conversation {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String?  @map("created_by")

  members  ConversationMember[]
  messages Message[]
}

model ConversationMember {
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  userId String @map("user_id")
  user   Profile      @relation(fields: [userId], references: [id], onDelete: Cascade)

  lastReadAt DateTime? @map("last_read_at")

  @@id([conversationId, userId])
}

model Message {
  id        String   @id @default(uuid())
  message   String?
  audioUrl  String?  @map("audio_url")
  timestamp DateTime @default(now())

  conversationId String?      @map("conversation_id")
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String  @map("sender_id")
  sender   Profile @relation("sent_messages", fields: [senderId], references: [id], onDelete: Cascade)
}

model Forum {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())

  createdBy String  @map("created_by")
  author    Profile @relation(name: "CreatedForums", fields: [createdBy], references: [id], onDelete: Cascade)

  posts   Post[]
  members ForumMember[]
}

model ForumMember {
  forumId String @map("forum_id")
  forum   Forum  @relation(fields: [forumId], references: [id], onDelete: Cascade)

  userId String  @map("user_id")
  user   Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([forumId, userId])
}
